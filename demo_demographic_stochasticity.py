#%% Simulation of Crane model with environmental stochastictiyimport pandas as pdimport numpy as npfrom scipy.stats import uniform, normimport matplotlib.pyplot as plt#%% Set-up for simulationb_avg = 0.5 # Average birth rated_avg = 0.1 # Average death rateb_sd = 0.03 # SD in birth rated_sd = 0.08 # SD iin death rateX0 = 100 # initial population sizeN_trials = 1000 # number of simulation trialsN_year = 5 # number of years that we track population# Initialize a empty dataframe to store the results of all trialsdf = pd.DataFrame()#%% Main loop# Looping over trialsfor i in range(N_trials):        # Initialize a vector to record crane population     X = np.zeros(N_year)    X[0] = X0 # Save initial number of squirrels        # Looping over years    for j in range(1, N_year):                        # Get stochastic birht and death rate        b = norm.rvs(loc=b_avg, scale=b_sd)        d = norm.rvs(loc=d_avg, scale=d_sd)                # Update population size        X[j] = X[j-1] + (b - d) * X[j-1]                    # Augment the result of a trial to the dataframe    df_temp = pd.DataFrame(X, columns=["Trial %s"%(i+1)])    df = pd.concat([df, df_temp], axis=1)      #%% Plot I : Plot random trajectories over time    fig, ax = plt.subplots(1,1,dpi=400)for i in range(N_trials):    ax.plot(df["Trial %s"%(i+1)], "k-o", linewidth=1, markersize=3)# Plot deterministic result for referenceax.plot((1. + b-d)**np.arange(0, N_year)*X0, "r-", linewidth=2, label="Deterministic")ax.set_xlabel("Time (years)", fontsize=15)    ax.set_ylabel("Population", fontsize=15)plt.grid(visible=True, alpha=0.2)plt.legend(fontsize=15)# plt.savefig("demographic_stochastic_traj.pdf") # Save figure (if needed)#%% Plot II : Box plot of stochastic simulationfig, ax = plt.subplots(1,1,dpi=400)ax.boxplot(df.to_numpy().transpose(), positions=np.arange(0,N_year))ax.set_xlabel("Time (years)", fontsize=15)    ax.set_ylabel("Population", fontsize=15)ax.set_xlabel("Time (years)", fontsize=15)    ax.set_ylabel("Population", fontsize=15)# plt.savefig("demographic_boxplot.pdf") # Save figure (if needed)# Overlay deterministic result for reference# ax.plot((1. + b-d)**np.arange(0, N_year)*X0, "r-", linewidth=2, label="Deterministic")