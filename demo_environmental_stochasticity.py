#%% Simulation of Crane model with environmental stochastictiyimport pandas as pdimport numpy as npfrom scipy.stats import uniformimport matplotlib.pyplot as plt#%% Set-up for simulationb = 0.5 # Average birth rated = 0.1 # Average death rateX0 = 100 # initial population sizeN_trials = 1000 # number of simulation trialsN_year = 10 # number of years that we track population# Initialize a empty dataframe to store the results of all trialsdf = pd.DataFrame()#%% Main loop# Looping over trialsfor i in range(N_trials):        # Initialize a vector to record crane population     X = np.zeros(N_year)    X[0] = X0 # Save initial number of squirrels        # Looping over years    for j in range(1, N_year):                # Uniformly distributed random value        C = uniform.rvs()                # Update population size        if C < 0.04: # catastrophe year            X[j] = X[j-1] + (0.6*b - 1.25*d)*X[j-1]        elif C >= 0.04: # normal year            X[j] = X[j-1] + (b-d)*X[j-1]                    # Augment the result of a trial to the dataframe    df_temp = pd.DataFrame(X, columns=["Trial %s"%(i+1)])    df = pd.concat([df, df_temp], axis=1)      #%% Plot    fig, ax = plt.subplots(1,1,dpi=400)# Plot deterministic result for referenceax.plot((1. + b-d)**np.arange(0, N_year)*X0, "r-", linewidth=2, label="Deterministic")# Plot worst deterministic result for reference# ax.plot((1. + 0.6*b - 1.25*d)**np.arange(0, N_year)*X0, "m-", linewidth=2, label="Worst")for i in range(N_trials):    ax.plot(df["Trial %s"%(i+1)], "k-o", linewidth=1, markersize=3)ax.set_xlabel("Time (years)", fontsize=15)    ax.set_ylabel("Population", fontsize=15)plt.grid(visible=True, alpha=0.2)plt.legend(fontsize=15)