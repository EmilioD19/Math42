import numpy as npimport matplotlib.pyplot as pltfrom scipy.integrate import solve_ivp#%% Define velocity field that defines differential equationsa = 1 b = 2def velocity_field(t, xvec):    x, y = xvec     dxdt = a*y               dydt = b*x    return [dxdt, dydt]#%% Plot solution trajectories# Set of initial conditions [x1(0), x2(0)]x0set = [[1e-3,1],         [1e-3,10],         [1,1e-3],         [10,1e-3],         [1e-3,1e-3]]tspan = (0, 10)teval = np.linspace(tspan[0], tspan[1], 1000)  # Time points for evaluationfor x0 in x0set:     sol = solve_ivp(velocity_field, tspan, x0, t_eval=teval, method='RK45')    t = sol.t    x1 = sol.y[0]  # x1 values    x2 = sol.y[1]  # x2 values    plt.loglog(x0[0], x0[1], 'mo')    plt.loglog(x1, x2, 'm-')    # Extra plot settingplt.xlabel("$x$", fontsize=15)plt.ylabel("$y$", fontsize=15)plt.axhline(0, color='black', linewidth=0.5, linestyle='--')plt.axvline(0, color='black', linewidth=0.5, linestyle='--')plt.grid(True, alpha=0.2)plt.axis("equal")# plt.xlim([-10,10])# plt.ylim([-10,10])plt.legend()