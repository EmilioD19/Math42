import numpy as npimport matplotlib.pyplot as pltfrom scipy.integrate import solve_ivp#%% Define velocity field that defines differential equationsdef velocity_field(t, xvec):    x, y = xvec     dxdt = y**2 - x                dydt = x**2 - 8*y    return [dxdt, dydt]#%% Visualize the velocity field# Create a grid of pointsx_min, x_max, y_min, y_max = -10, 10, -10, 10x_values = np.linspace(x_min, x_max, 20)y_values = np.linspace(y_min, y_max, 20)X, Y = np.meshgrid(x_values, y_values)# Compute the velocity fieldU = Y**2 - X # dx/dtV = X**2 - 8*Y  # dy/dt# Normalize the vectors for better visualizationmagnitude = np.sqrt(U**2 + V**2)U /= magnitudeV /= magnitude# Plot the velocity fieldplt.figure(figsize=(8, 8))plt.quiver(X, Y, U, V, magnitude, cmap='viridis', scale=25)xvec = np.linspace(0,10,500)plt.plot(xvec, np.sqrt(xvec), 'b:', label="Nullcline: $dx/dt=0$")plt.plot(xvec, -np.sqrt(xvec), 'b:')plt.plot(xvec, xvec**2/8, 'r:', label="Nullcline: $dy/dt=0$")plt.plot(-xvec, xvec**2/8, 'r:')# Plot equilibriaplt.plot(0,0, 'ko', label="Equilibrium")plt.plot(4,2, 'ko')#%% Plot solution trajectories# Set of initial conditions [x1(0), x2(0)]x0set = [[7.5, 0],         [5, -5],          [-5, -5],         [-7.5, 5],         [0, -10],         [0,5],         [0,10]]tspan = (0, 10)teval = np.linspace(tspan[0], tspan[1], 1000)  # Time points for evaluationfor x0 in x0set:     sol = solve_ivp(velocity_field, tspan, x0, t_eval=teval, method='RK45')    t = sol.t    x1 = sol.y[0]  # x1 values    x2 = sol.y[1]  # x2 values    plt.plot(x0[0], x0[1], 'mo')    plt.plot(x1, x2, 'm-')            # Extra plot settingplt.xlabel("$x$", fontsize=15)plt.ylabel("$y$", fontsize=15)plt.xlim(x_min, x_max)plt.ylim(y_min, y_max)plt.axhline(0, color='black', linewidth=0.5, linestyle='--')plt.axvline(0, color='black', linewidth=0.5, linestyle='--')plt.colorbar(label='Magnitude')plt.grid(True, alpha=0.2)plt.axis("equal")plt.xlim([-10,10])plt.ylim([-10,10])plt.legend()