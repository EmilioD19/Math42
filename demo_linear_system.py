#%% Numerical solution of DE with visualization of velocity field#%% Import packagesimport numpy as npimport matplotlib.pyplot as pltfrom scipy.integrate import solve_ivp#%% Define 2x2 matrix A for the linear system x' = Ax # Work backward : construct A with given eigenvalues and eigenvectors v1,v2# Eigenvalues given in a diagonal matrixDmat = np.diag([3,-2])# Eigenvectorsv1 = np.array([[1/2, -1/2]]).T v2 = np.array([[1/2, 1/3]]).T# Construct the eigenvector matrix Vmat = np.hstack((v1,v2))# Finally, get A = V * D * inverse(V)Amat = np.dot(Vmat, np.dot(Dmat, np.linalg.inv(Vmat))) #%% Compute velocity field on the domain [-L,L]x[-L,L]# Create a grid of pointsL = 20x_min, x_max, y_min, y_max = -L, L, -L, Lx_values = np.linspace(x_min, x_max, 20)y_values = np.linspace(y_min, y_max, 20)X, Y = np.meshgrid(x_values, y_values)# Compute the velocity fieldU = Amat[0, 0] * X + Amat[0, 1] * Y  # dx/dtV = Amat[1, 0] * X + Amat[1, 1] * Y  # dy/dt# Normalize the vectors for better visualizationmagnitude = np.sqrt(U**2 + V**2)U /= magnitudeV /= magnitude#%% Solve for numerical solution of DE# The velocity field that defines differential equationsdef velocity_field(t, x):    x1, x2 = x    dx1dt = Amat[0,0]*x1 + Amat[0,1]*x2                dx2dt = Amat[1,0]*x1 + Amat[1,1]*x2       return [dx1dt, dx2dt]x0 = [8, 2.5]t_span = (0, 1)  # Time range for the solutiont_eval = np.linspace(t_span[0], t_span[1], 500)  # Time points for evaluation## Solve DE numericallysol = solve_ivp(velocity_field, t_span, x0, t_eval=t_eval, method='RK45')# Extract numerical solutiont = sol.tx1 = sol.y[0]  # x1 valuesx2 = sol.y[1]  # x2 values#%% Plot numerical solution# Plot the velocity fieldplt.subplots(1,1, dpi=400)plt.quiver(0, 0, Vmat[0,0], Vmat[1,0], scale=1.5, color='b', label='Eigenvector $\mathbf{v}_1$')plt.quiver(0, 0, Vmat[0,1], Vmat[1,1], scale=1.5, color='r', label='Eigenvector $\mathbf{v}_2$')plt.quiver(X, Y, U, V, magnitude, cmap='viridis', scale=25)## Plot initial valueplt.plot(x0[0], x0[1], 'mo')## Plot solution trajectoryplt.plot(x1, x2, 'm-', label="Solution trajectory $x(t)$")# Extra plot settingplt.title("Velocity Field of $x' = Ax$")plt.xlabel("$x_1$", fontsize=15)plt.ylabel("$x_2$", fontsize=15)plt.xlim(x_min, x_max)plt.ylim(y_min, y_max)plt.axhline(0, color='black', linewidth=0.5, linestyle='--')plt.axvline(0, color='black', linewidth=0.5, linestyle='--')plt.colorbar(label='Magnitude of velocity')plt.grid(True, alpha=0.2)plt.axis('equal')plt.xlim([-L,L])plt.ylim([-L,L])plt.legend(loc="lower left")